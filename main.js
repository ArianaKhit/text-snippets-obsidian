/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class TextSnippets extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.mlSnippets = {};
    }
    /**
     * @type function(TFile): boolean
     * @param {TFile} file - The deleted file
     * @returns boolean - this indicates wether the file was a child of multilineFolder, only useful for debugging
     * @description if file was in the multiline snippet folder, deletes the entry from mlSnippets
     * @private
      */
    deleteMLsnippet(file) {
        // console.log("DeleteSnippet");
        if (file.parent.path == this.settings.multilineFolder) {
            delete this.mlSnippets["file.basename"];
            return true;
        }
        return false;
    }
    /**
     * @type function(TFile): boolean
     * @param {TFile} file - The modified file
     * @returns boolean - this indicates whether the file was a child of multilineFolder, only useful for debugging
     * @description if file was in the multiline snippet folder, updates the contents
     * @private
     */
    modifyMLsnippet(file) {
        console.log("ModdifySnippet");
        if (file.parent.path == this.settings.multilineFolder) {
            this.app.vault.cachedRead(file).then((content) => this.mlSnippets[file.basename] = content);
            return true;
        }
        return false;
    }
    /**
     * @type function(TFile): boolean
     * @param {TFile} file - The renamed file
     * @returns boolean - this indicates wether the file was a child of multilineFolder, only useful for debugging
     * @description if file was in the multiline snippet folder, assigns the contents to the new snippet name and deletes the old one
     * @private
     */
    renameMLsnippet(file) {
        console.log("Rename snippet");
        if (file.parent.path == this.settings.multilineFolder) {
            let oldname = "";
            let newname = file.basename;
            let folder = this.app.vault.getAbstractFileByPath(this.settings.multilineFolder);
            let files = folder.children.map((f) => f.basename);
            for (const k in this.mlSnippets) {
                if (k in files)
                    continue;
                oldname = k;
                break;
            }
            this.mlSnippets[newname] = this.mlSnippets[oldname];
            delete this.mlSnippets[oldname];
            return true;
        }
        return false;
    }
    /**
     * @type function(): void
     * @description Initializes mlSnippets and places watchers which check for file changes in the snippet folder.
     * @private
     */
    initMLSnippets() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Init snippets");
            let folder = this.app.vault.getAbstractFileByPath(this.settings.multilineFolder);
            this.app.vault.on("modify", this.modifyMLsnippet.bind(this));
            this.app.vault.on("rename", this.renameMLsnippet.bind(this));
            this.app.vault.on("delete", this.deleteMLsnippet.bind(this));
            if (folder instanceof obsidian.TFolder) {
                folder.children.forEach((f) => {
                    if (f instanceof obsidian.TFile) {
                        this.app.vault.cachedRead(f).then((replacer) => this.mlSnippets[f.basename] = replacer);
                    }
                });
            }
            else {
                throw "invalid user input";
            }
        });
    }
    onInit() { }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading snippets plugin");
            yield this.loadSettings();
            this.addSettingTab(new TextSnippetsSettingsTab(this.app, this));
            //expected warning
            var isLegacy = this.app.vault.config.legacyEditor;
            if (!isLegacy != this.settings.isWYSIWYG) {
                this.settings.isWYSIWYG = !isLegacy;
                yield this.saveSettings();
            }
            this.addCommand({
                id: "text-snippets",
                name: "Run snippet replacement",
                callback: () => this.SnippetOnTrigger(),
                hotkeys: [{
                        modifiers: ["Mod"],
                        key: "tab"
                    }],
            });
            this.cmEditors = [];
            this.registerCodeMirror((cm) => {
                this.cmEditors.push(cm);
                // the callback has to be called through another function in order for 'this' to work
                cm.on('keydown', (cm, event) => this.handleKeyDown(cm, event));
            });
            // initialize the snippets when the workspace is ready
            this.app.workspace.onLayoutReady(() => {
                // the 3 lines below are a remnant of a past version of upstream and I'm not sure what to do with it
                // this runs the snippet replacement after space, which doesn't seem to be intended behaviour, but it is something I want because
                // I cannot assign space as the snippet hotkey via the GUI
                let editor = this.app.workspace.activeLeaf.view.sourceMode.cmEditor;
                this.settings.isWYSIWYG = (typeof editor.wordAt === 'function');
                this.registerDomEvent(document, 'keydown', (event) => this.handleKeyDown(editor, event));
                this.initMLSnippets();
            });
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Unloading text snippet plugin");
            this.cmEditors = [];
            this.registerCodeMirror((cm) => {
                this.cmEditors.push(cm);
                // the callback has to be called through another function in order for 'this' to work
                cm.off('keydown', (cm, event) => this.handleKeyDown(cm, event));
            });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    UpdateSplit(newlineSymbol) {
        console.log("updatesplit");
        var nlSymb = newlineSymbol;
        var nlSymb = nlSymb.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        var rg = '(?<!' + nlSymb + ')\\n';
        const regex = new RegExp(rg);
        var splited = this.settings.snippets_file.split(regex);
        splited = splited.filter(item => item);
        this.settings.snippets = splited;
    }
    getSelectedText(editor) {
        console.log("GetSelectedText");
        if (editor.somethingSelected()) {
            return editor.getSelection();
        }
        else {
            var wordBoundaries = this.getWordBoundaries(editor);
            editor.getDoc().setSelection(wordBoundaries.start, wordBoundaries.end);
            return editor.getSelection();
        }
    }
    isWord(c) {
        console.log("IsWord");
        //if character is not a whiespace or a delimiter
        var notWord = ' \t\n\r\v' + this.settings.wordDelimiters;
        if (notWord.indexOf(c) <= -1) {
            return true;
        }
        return false;
    }
    SnippetsWordAt(cm, pos) {
        console.log("snippetsWordAt");
        var start = pos.ch, end = start, line = cm.getLine(pos.line);
        while (start && this.isWord(line.charAt(start - 1)))
            --start;
        while (end < line.length && this.isWord(line.charAt(end)))
            ++end;
        var fr = { line: pos.line, ch: start };
        var t = { line: pos.line, ch: end };
        return { from: fr, to: t, word: line.slice(start, end) };
    }
    getWordBoundaries(editor) {
        console.log("getWordBoundaries");
        var cursor = editor.getCursor();
        var line = cursor.line;
        cursor.ch;
        var word = this.SnippetsWordAt(editor, cursor);
        var wordStart = word.from.ch;
        var wordEnd = word.to.ch;
        return {
            start: {
                line: line,
                ch: wordStart
            },
            end: {
                line: line,
                ch: wordEnd
            },
        };
    }
    findSnippet(editor, cursorOrig, cursor) {
        console.log("find snippet");
        var selectedText = this.getSelectedText(editor);
        Array.from(this.settings.wordDelimiters);
        '' + selectedText.split(' ').join('');
        var newStr = "";
        var i;
        var snippets = this.settings.snippets;
        for (i in snippets) {
            var snippet = snippets[i].split(' : ');
            if (selectedText == snippet[0]) {
                newStr = snippet[1];
            }
        }
        if (selectedText in this.mlSnippets && newStr.length == 0) {
            newStr = this.mlSnippets[selectedText];
        }
        return newStr;
    }
    calculateCursorEndPos(nStr, cursor, endPosition) {
        console.log("calculateCursorEndPos");
        var nlSymb = this.settings.newlineSymbol;
        var endSymbol = this.settings.endSymbol;
        var stopSymbol = this.settings.stopSymbol;
        // var newStr = nStr.split('\n').join('');
        var newStr = nStr;
        if (newStr.indexOf(stopSymbol) == -1) {
            var rawEnd = newStr.indexOf(endSymbol);
            if (rawEnd == -1)
                rawEnd = newStr.length;
            var lastNl = newStr.substring(0, rawEnd).lastIndexOf(nlSymb);
            if (lastNl != -1)
                var endPosIndex = rawEnd - lastNl - nlSymb.length - cursor.ch;
            else
                var endPosIndex = rawEnd;
        }
        else {
            var endPosIndex = 0;
        }
        nlSymb = nlSymb.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&'); //no special symbols in nlSymb
        var rg = nlSymb + '\\n' + '|' + nlSymb;
        const regex = new RegExp(rg);
        const regexF = new RegExp(rg, 'g');
        var nlinesCount = (newStr.substring(0, rawEnd).match(regexF) || []).length;
        endPosition.nlinesCount = nlinesCount;
        endPosition.position = endPosIndex;
        newStr = newStr.split(regex).join('\n');
        newStr = newStr.replace(endSymbol, '');
        return newStr;
    }
    insertSnippet(key = '', snippetStartpos = { ch: -1, line: -1 }) {
        console.log("insertSnippet");
        let activeLeaf = this.app.workspace.activeLeaf;
        let editor = activeLeaf.view.sourceMode.cmEditor;
        var cursorOrig = editor.getCursor();
        var wasSelection = editor.somethingSelected();
        var cursor = editor.getCursor('from');
        if (wasSelection) {
            ({ start: cursor, end: editor.getCursor('to') });
        }
        else {
            this.getWordBoundaries(editor);
        }
        var stopSymbol = this.settings.stopSymbol;
        var pasteSymbol = this.settings.pasteSymbol;
        var stopFound = false;
        var newStr = "";
        newStr = this.findSnippet(editor, cursorOrig, cursor);
        cursor = editor.getCursor('from');
        //proceed Tab and Spacebar
        var endCursor = editor.getCursor('to');
        if (newStr == "" ||
            (key == 'Space' && (cursorOrig.ch != endCursor.ch || cursorOrig.line != endCursor.line))) {
            if (wasSelection == false) {
                editor.getDoc().setSelection(cursorOrig, cursorOrig);
            }
            if (key == 'Space')
                return false;
            if (newStr == "") {
                editor.setCursor(cursorOrig);
                return this.nextStop();
            }
        }
        //find end position
        var endPosition = { nlinesCount: 0, position: 0 };
        newStr = this.calculateCursorEndPos(newStr, cursor, endPosition);
        if (newStr.indexOf(stopSymbol) != -1)
            stopFound = true;
        if (newStr.indexOf(pasteSymbol) != -1)
            snippetStartpos = cursor;
        editor.replaceSelection(newStr);
        if (stopFound) {
            editor.setCursor({
                line: cursor.line,
                ch: cursor.ch
            });
            return this.nextStop();
        }
        else {
            editor.setCursor({
                line: cursor.line + endPosition.nlinesCount,
                ch: cursor.ch + endPosition.position
            });
        }
        editor.focus();
        return true;
    }
    adjustCursor(editor, cursor, newStr, oldStr) {
        console.log("adjustCursor");
        var cursorOffset = newStr.length - oldStr.length;
        this.adjustCursorOffset(editor, cursor, cursorOffset);
    }
    adjustCursorOffset(editor, cursor, cursorOffset) {
        console.log("AdjustCursorOffset");
        editor.setCursor({
            line: cursor.line,
            ch: cursor.ch + cursorOffset
        });
    }
    handleKeyDown(cm, event) {
        console.log("HandleKeyDown");
        if ((event.key == 'Tab' && this.settings.useTab) || (event.code == 'Space' && this.settings.useSpace)) {
            this.SnippetOnTrigger(event.code, true);
        }
    }
    SnippetOnTrigger(key = '', preventDef = false) {
        console.log("snippetOnTrigger");
        let activeLeaf = this.app.workspace.activeLeaf;
        let cm = activeLeaf.view.sourceMode.cmEditor;
        var cursorSt = cm.getCursor();
        if (this.insertSnippet(key, cursorSt)) {
            if (preventDef) {
                event.preventDefault();
                if (this.settings.isWYSIWYG && key == 'Tab') {
                    // delete '\t' in Live preview
                    var search = cm.searchCursor('\t', cursorSt);
                    if (search.findPrevious()) {
                        search.replace('');
                    }
                }
            }
            if (cursorSt.ch >= 0 && cursorSt.line >= 0) { //paste text from clipboard
                cm.getCursor();
                navigator.clipboard.readText().then((clipText) => {
                    if (this.settings.isWYSIWYG == false) {
                        var search = cm.getSearchCursor(this.settings.pasteSymbol, cursorSt);
                    }
                    else {
                        var search = cm.searchCursor(this.settings.pasteSymbol, cursorSt);
                    }
                    if (search.findNext()) {
                        search.replace(clipText);
                    }
                });
            }
            return true;
        }
        return this.nextStop();
    }
    nextStop() {
        console.log("NextStop");
        let activeLeaf = this.app.workspace.activeLeaf;
        let cm = activeLeaf.view.sourceMode.cmEditor;
        if (this.settings.isWYSIWYG == false) {
            var search = cm.getSearchCursor(this.settings.stopSymbol, cm.getCursor());
        }
        else {
            var search = cm.searchCursor(this.settings.stopSymbol, cm.getCursor());
        }
        if (search.findNext()) {
            search.replace("");
            if (this.settings.isWYSIWYG == false) {
                cm.setCursor(search.from());
            }
            else {
                cm.setCursor(search.current().from);
            }
            return true;
        }
        else if (this.settings.useTab) {
            return false;
        }
        return false;
    }
}
const DEFAULT_SETTINGS = {
    snippets_file: "snippets : It is an obsidian plugin, that replaces your selected text.",
    snippets: ["snippets : It is an obsidian plugin, that replaces your selected text."],
    endSymbol: '$end$',
    newlineSymbol: '$nl$',
    stopSymbol: "$tb$",
    pasteSymbol: "$pst$",
    useTab: true,
    useSpace: false,
    wordDelimiters: "$()[]{}<>,.!?;:\'\"\\/",
    isWYSIWYG: false,
    multilineFolder: "",
};
class TextSnippetsSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Text Snippets - Settings' });
        new obsidian.Setting(containerEl)
            .setName("Snippets")
            .setDesc("Type here your snippets in format 'snippet : result', one per line. Empty lines will be ignored. Ctrl+Tab to replace (hotkey can be changed).")
            .setClass("text-snippets-class")
            .addTextArea((text) => text
            .setPlaceholder("before : after")
            .setValue(this.plugin.settings.snippets_file)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.snippets_file = value;
            this.plugin.UpdateSplit(this.plugin.settings.newlineSymbol);
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Multiline Snippet Path')
            .setDesc('This specifies the path where the multiline snippets for this plugin are stored')
            .addText(text => text
            .setPlaceholder('Enter your path')
            .setValue(this.plugin.settings.multilineFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.multilineFolder = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Cursor end position mark")
            .setDesc("Places the cursor to the mark position after inserting a snippet (default: $end$).\nMark does not appear anywhere within the snippet. Do not use together with Stop Symbol.")
            .setClass("text-snippets-cursor")
            .addTextArea((text) => text
            .setPlaceholder("$end$")
            .setValue(this.plugin.settings.endSymbol)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value == '') {
                value = '$end$';
            }
            this.plugin.settings.endSymbol = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Newline mark")
            .setDesc("Ignores newline after mark, replace it with a newline character after expanding (default: $nl$).\nNecessary to write before every line break in multiline snippets.")
            .setClass("text-snippets-newline")
            .addTextArea((text) => text
            .setPlaceholder("$nl$")
            .setValue(this.plugin.settings.newlineSymbol)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value == '') {
                value = '$nl$';
            }
            this.plugin.settings.newlineSymbol = value;
            this.plugin.UpdateSplit(value);
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Stop Symbol')
            .setDesc('Symbol to jump to when command is called.')
            .setClass("text-snippets-tabstops")
            .addTextArea((text) => text
            .setPlaceholder('')
            .setValue(this.plugin.settings.stopSymbol)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value == '') {
                value = '$tb$';
            }
            this.plugin.settings.stopSymbol = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Clipboard paste Symbol')
            .setDesc('Symbol to be replaced with clipboard content.')
            .setClass("text-snippets-tabstops")
            .addTextArea((text) => text
            .setPlaceholder('')
            .setValue(this.plugin.settings.pasteSymbol)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value == '') {
                value = '$pst$';
            }
            this.plugin.settings.pasteSymbol = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Expand on Tab")
            .setDesc("Use the Tab key as the trigger.")
            .addToggle(toggle => toggle.setValue(this.plugin.settings.useTab)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.useTab = !this.plugin.settings.useTab;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Expand on Space")
            .setDesc("Use the Space bar button as the trigger.")
            .addToggle(toggle => toggle.setValue(this.plugin.settings.useSpace)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.useSpace = !this.plugin.settings.useSpace;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Live Preview Mode")
            .setDesc("Toggle manually if not correct. You should restart plugin after changing this option.")
            .addToggle(toggle => toggle.setValue(this.plugin.settings.isWYSIWYG)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.isWYSIWYG = !this.plugin.settings.isWYSIWYG;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Word delimiters')
            .setDesc('Сharacters for specifying the boundary between separate words.')
            .setClass("text-snippets-delimiter")
            .addTextArea((text) => text
            .setPlaceholder('')
            .setValue(this.plugin.settings.wordDelimiters)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.wordDelimiters = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = TextSnippets;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG5cdEFwcCxcclxuXHRQbHVnaW4sXHJcblx0UGx1Z2luU2V0dGluZ1RhYixcclxuXHRTZXR0aW5nLFxyXG5cdFRleHRBcmVhQ29tcG9uZW50LFxyXG5cdE1hcmtkb3duVmlldyxcclxuXHRFZGl0b3IsXHJcblx0VmlldyxcclxuXHRURm9sZGVyLFxyXG5cdFRGaWxlLFxyXG5cdFRBYnN0cmFjdEZpbGVcclxufSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgUGFzc1Rocm91Z2ggfSBmcm9tIFwic3RyZWFtXCI7XHJcblxyXG50eXBlIFN0cmluZ1N0cmluZ01hcCA9IHtcclxuXHRba2V5OiBzdHJpbmddOiBzdHJpbmc7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dFNuaXBwZXRzIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogVGV4dFNuaXBwZXRzU2V0dGluZ3M7XHJcblx0cHJpdmF0ZSBjbUVkaXRvcnM6IENvZGVNaXJyb3IuRWRpdG9yW107XHJcblx0bWxTbmlwcGV0czogU3RyaW5nU3RyaW5nTWFwID0ge307XHJcblx0bGFzdF9tb2RpZmllZDogRGF0ZTtcclxuXHJcblx0LyoqXHJcblx0ICogQHR5cGUgZnVuY3Rpb24oVEZpbGUpOiBib29sZWFuXHJcblx0ICogQHBhcmFtIHtURmlsZX0gZmlsZSAtIFRoZSBkZWxldGVkIGZpbGVcclxuXHQgKiBAcmV0dXJucyBib29sZWFuIC0gdGhpcyBpbmRpY2F0ZXMgd2V0aGVyIHRoZSBmaWxlIHdhcyBhIGNoaWxkIG9mIG11bHRpbGluZUZvbGRlciwgb25seSB1c2VmdWwgZm9yIGRlYnVnZ2luZ1xyXG5cdCAqIEBkZXNjcmlwdGlvbiBpZiBmaWxlIHdhcyBpbiB0aGUgbXVsdGlsaW5lIHNuaXBwZXQgZm9sZGVyLCBkZWxldGVzIHRoZSBlbnRyeSBmcm9tIG1sU25pcHBldHNcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAgKi9cclxuXHRkZWxldGVNTHNuaXBwZXQoZmlsZTogVEZpbGUpOiBib29sZWFuIHsgLy8gaWYgZmlsZSBvZiBmb2xkZXIgZ2V0cyBkZWxldGVkLCBkZWxldGUgdGhlIHNuaXBwZXQgZnJvbSBtbFNuaXBwZXRzXHJcblx0XHQvLyBjb25zb2xlLmxvZyhcIkRlbGV0ZVNuaXBwZXRcIik7XHJcblx0XHRpZiAoZmlsZS5wYXJlbnQucGF0aCA9PSB0aGlzLnNldHRpbmdzLm11bHRpbGluZUZvbGRlcikge1xyXG5cdFx0XHRkZWxldGUgdGhpcy5tbFNuaXBwZXRzW1wiZmlsZS5iYXNlbmFtZVwiXTtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIEB0eXBlIGZ1bmN0aW9uKFRGaWxlKTogYm9vbGVhblxyXG5cdCAqIEBwYXJhbSB7VEZpbGV9IGZpbGUgLSBUaGUgbW9kaWZpZWQgZmlsZVxyXG5cdCAqIEByZXR1cm5zIGJvb2xlYW4gLSB0aGlzIGluZGljYXRlcyB3aGV0aGVyIHRoZSBmaWxlIHdhcyBhIGNoaWxkIG9mIG11bHRpbGluZUZvbGRlciwgb25seSB1c2VmdWwgZm9yIGRlYnVnZ2luZ1xyXG5cdCAqIEBkZXNjcmlwdGlvbiBpZiBmaWxlIHdhcyBpbiB0aGUgbXVsdGlsaW5lIHNuaXBwZXQgZm9sZGVyLCB1cGRhdGVzIHRoZSBjb250ZW50c1xyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0bW9kaWZ5TUxzbmlwcGV0KGZpbGU6IFRGaWxlKTogYm9vbGVhbiB7IC8vIHVwZGF0ZSB0aGUgc25pcHBldCBjb250ZW50IGluIG1sU25pcHBldHMgaWYgYSBmaWxlIGdldHMgbW9kaWZpZWRcclxuXHRcdGNvbnNvbGUubG9nKFwiTW9kZGlmeVNuaXBwZXRcIik7XHJcblx0XHRpZiAoZmlsZS5wYXJlbnQucGF0aCA9PSB0aGlzLnNldHRpbmdzLm11bHRpbGluZUZvbGRlcikge1xyXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpLnRoZW4oKGNvbnRlbnQpID0+IHRoaXMubWxTbmlwcGV0c1tmaWxlLmJhc2VuYW1lXSA9IGNvbnRlbnQpO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEB0eXBlIGZ1bmN0aW9uKFRGaWxlKTogYm9vbGVhblxyXG5cdCAqIEBwYXJhbSB7VEZpbGV9IGZpbGUgLSBUaGUgcmVuYW1lZCBmaWxlXHJcblx0ICogQHJldHVybnMgYm9vbGVhbiAtIHRoaXMgaW5kaWNhdGVzIHdldGhlciB0aGUgZmlsZSB3YXMgYSBjaGlsZCBvZiBtdWx0aWxpbmVGb2xkZXIsIG9ubHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmdcclxuXHQgKiBAZGVzY3JpcHRpb24gaWYgZmlsZSB3YXMgaW4gdGhlIG11bHRpbGluZSBzbmlwcGV0IGZvbGRlciwgYXNzaWducyB0aGUgY29udGVudHMgdG8gdGhlIG5ldyBzbmlwcGV0IG5hbWUgYW5kIGRlbGV0ZXMgdGhlIG9sZCBvbmVcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cdHJlbmFtZU1Mc25pcHBldChmaWxlOiBURmlsZSk6IGJvb2xlYW4geyAvLyBpZiBhIGZpbGUgZ2V0cyByZW5hbWVkLCBhc3NpZ24gY29udGVudCB0byBuZXcga2V5IGFuZCBkZWxldGUgb2xkIGtleSBhbmQgdmFsdWVcclxuXHRcdGNvbnNvbGUubG9nKFwiUmVuYW1lIHNuaXBwZXRcIik7XHJcblxyXG5cdFx0aWYgKGZpbGUucGFyZW50LnBhdGggPT0gdGhpcy5zZXR0aW5ncy5tdWx0aWxpbmVGb2xkZXIpIHtcclxuXHRcdFx0bGV0IG9sZG5hbWUgPSBcIlwiO1xyXG5cdFx0XHRsZXQgbmV3bmFtZSA9IGZpbGUuYmFzZW5hbWU7XHJcblx0XHRcdGxldCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy5tdWx0aWxpbmVGb2xkZXIpIGFzIFRGb2xkZXI7XHJcblx0XHRcdGxldCBmaWxlcyA9IGZvbGRlci5jaGlsZHJlbi5tYXAoKGYpID0+IChmIGFzIFRGaWxlKS5iYXNlbmFtZSk7XHJcblx0XHRcdGZvciAoY29uc3QgayBpbiB0aGlzLm1sU25pcHBldHMpIHtcclxuXHRcdFx0XHRpZiAoayBpbiBmaWxlcykgY29udGludWU7XHJcblx0XHRcdFx0b2xkbmFtZSA9IGs7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5tbFNuaXBwZXRzW25ld25hbWVdID0gdGhpcy5tbFNuaXBwZXRzW29sZG5hbWVdO1xyXG5cdFx0XHRkZWxldGUgdGhpcy5tbFNuaXBwZXRzW29sZG5hbWVdO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cclxuXHQvKipcclxuXHQgKiBAdHlwZSBmdW5jdGlvbigpOiB2b2lkXHJcblx0ICogQGRlc2NyaXB0aW9uIEluaXRpYWxpemVzIG1sU25pcHBldHMgYW5kIHBsYWNlcyB3YXRjaGVycyB3aGljaCBjaGVjayBmb3IgZmlsZSBjaGFuZ2VzIGluIHRoZSBzbmlwcGV0IGZvbGRlci5cclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqL1xyXG5cdGFzeW5jIGluaXRNTFNuaXBwZXRzKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJJbml0IHNuaXBwZXRzXCIpO1xyXG5cclxuXHRcdGxldCBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodGhpcy5zZXR0aW5ncy5tdWx0aWxpbmVGb2xkZXIpO1xyXG5cdFx0dGhpcy5hcHAudmF1bHQub24oXCJtb2RpZnlcIiwgdGhpcy5tb2RpZnlNTHNuaXBwZXQuYmluZCh0aGlzKSk7XHJcblx0XHR0aGlzLmFwcC52YXVsdC5vbihcInJlbmFtZVwiLCB0aGlzLnJlbmFtZU1Mc25pcHBldC5iaW5kKHRoaXMpKTtcclxuXHRcdHRoaXMuYXBwLnZhdWx0Lm9uKFwiZGVsZXRlXCIsIHRoaXMuZGVsZXRlTUxzbmlwcGV0LmJpbmQodGhpcykpO1xyXG5cclxuXHRcdGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XHJcblxyXG5cdFx0XHRmb2xkZXIuY2hpbGRyZW4uZm9yRWFjaCgoZikgPT4ge1xyXG5cdFx0XHRcdGlmIChmIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdFx0XHRcdHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQoZikudGhlbigocmVwbGFjZXIpID0+IHRoaXMubWxTbmlwcGV0c1tmLmJhc2VuYW1lXSA9IHJlcGxhY2VyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRocm93IFwiaW52YWxpZCB1c2VyIGlucHV0XCI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRvbkluaXQoKSB7IH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJMb2FkaW5nIHNuaXBwZXRzIHBsdWdpblwiKTtcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUZXh0U25pcHBldHNTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdFx0Ly9leHBlY3RlZCB3YXJuaW5nXHJcblx0XHR2YXIgaXNMZWdhY3kgPSB0aGlzLmFwcC52YXVsdC5jb25maWcubGVnYWN5RWRpdG9yO1xyXG5cdFx0aWYgKCFpc0xlZ2FjeSAhPSB0aGlzLnNldHRpbmdzLmlzV1lTSVdZRykge1xyXG5cdFx0XHR0aGlzLnNldHRpbmdzLmlzV1lTSVdZRyA9ICFpc0xlZ2FjeTtcclxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogXCJ0ZXh0LXNuaXBwZXRzXCIsXHJcblx0XHRcdG5hbWU6IFwiUnVuIHNuaXBwZXQgcmVwbGFjZW1lbnRcIixcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuU25pcHBldE9uVHJpZ2dlcigpLFxyXG5cdFx0XHRob3RrZXlzOiBbe1xyXG5cdFx0XHRcdG1vZGlmaWVyczogW1wiTW9kXCJdLFxyXG5cdFx0XHRcdGtleTogXCJ0YWJcIlxyXG5cdFx0XHR9XSxcclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuY21FZGl0b3JzID0gW107XHJcblx0XHR0aGlzLnJlZ2lzdGVyQ29kZU1pcnJvcigoY20pID0+IHtcclxuXHRcdFx0dGhpcy5jbUVkaXRvcnMucHVzaChjbSk7XHJcblx0XHRcdC8vIHRoZSBjYWxsYmFjayBoYXMgdG8gYmUgY2FsbGVkIHRocm91Z2ggYW5vdGhlciBmdW5jdGlvbiBpbiBvcmRlciBmb3IgJ3RoaXMnIHRvIHdvcmtcclxuXHRcdFx0Y20ub24oJ2tleWRvd24nLCAoY20sIGV2ZW50KSA9PiB0aGlzLmhhbmRsZUtleURvd24oY20sIGV2ZW50KSk7XHJcblx0XHR9KTtcclxuXHRcdC8vIGluaXRpYWxpemUgdGhlIHNuaXBwZXRzIHdoZW4gdGhlIHdvcmtzcGFjZSBpcyByZWFkeVxyXG5cclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbkxheW91dFJlYWR5KCgpID0+IHtcclxuXHRcdFx0Ly8gdGhlIDMgbGluZXMgYmVsb3cgYXJlIGEgcmVtbmFudCBvZiBhIHBhc3QgdmVyc2lvbiBvZiB1cHN0cmVhbSBhbmQgSSdtIG5vdCBzdXJlIHdoYXQgdG8gZG8gd2l0aCBpdFxyXG5cdFx0XHQvLyB0aGlzIHJ1bnMgdGhlIHNuaXBwZXQgcmVwbGFjZW1lbnQgYWZ0ZXIgc3BhY2UsIHdoaWNoIGRvZXNuJ3Qgc2VlbSB0byBiZSBpbnRlbmRlZCBiZWhhdmlvdXIsIGJ1dCBpdCBpcyBzb21ldGhpbmcgSSB3YW50IGJlY2F1c2VcclxuXHRcdFx0Ly8gSSBjYW5ub3QgYXNzaWduIHNwYWNlIGFzIHRoZSBzbmlwcGV0IGhvdGtleSB2aWEgdGhlIEdVSVxyXG5cdFx0XHRsZXQgZWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWYudmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0XHR0aGlzLnNldHRpbmdzLmlzV1lTSVdZRyA9ICh0eXBlb2YgZWRpdG9yLndvcmRBdCA9PT0gJ2Z1bmN0aW9uJyk7XHJcblx0XHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2tleWRvd24nLCAoZXZlbnQpID0+IHRoaXMuaGFuZGxlS2V5RG93bihlZGl0b3IsIGV2ZW50KSk7XHJcblx0XHRcdHRoaXMuaW5pdE1MU25pcHBldHMoKTtcclxuXHRcdH1cclxuXHRcdClcclxuXHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgb251bmxvYWQoKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcIlVubG9hZGluZyB0ZXh0IHNuaXBwZXQgcGx1Z2luXCIpO1xyXG5cclxuXHRcdHRoaXMuY21FZGl0b3JzID0gW107XHJcblx0XHR0aGlzLnJlZ2lzdGVyQ29kZU1pcnJvcigoY20pID0+IHtcclxuXHRcdFx0dGhpcy5jbUVkaXRvcnMucHVzaChjbSk7XHJcblx0XHRcdC8vIHRoZSBjYWxsYmFjayBoYXMgdG8gYmUgY2FsbGVkIHRocm91Z2ggYW5vdGhlciBmdW5jdGlvbiBpbiBvcmRlciBmb3IgJ3RoaXMnIHRvIHdvcmtcclxuXHRcdFx0Y20ub2ZmKCdrZXlkb3duJywgKGNtLCBldmVudCkgPT4gdGhpcy5oYW5kbGVLZXlEb3duKGNtLCBldmVudCkpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncylcclxuXHR9XHJcblxyXG5cdFVwZGF0ZVNwbGl0KG5ld2xpbmVTeW1ib2w6IHN0cmluZykge1xyXG5cdFx0Y29uc29sZS5sb2coXCJ1cGRhdGVzcGxpdFwiKTtcclxuXHRcdHZhciBubFN5bWIgPSBuZXdsaW5lU3ltYm9sO1xyXG5cdFx0dmFyIG5sU3ltYiA9IG5sU3ltYi5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xyXG5cdFx0dmFyIHJnID0gJyg/PCEnICsgbmxTeW1iICsgJylcXFxcbic7XHJcblx0XHRjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocmcpO1xyXG5cdFx0dmFyIHNwbGl0ZWQgPSB0aGlzLnNldHRpbmdzLnNuaXBwZXRzX2ZpbGUuc3BsaXQocmVnZXgpO1xyXG5cdFx0c3BsaXRlZCA9IHNwbGl0ZWQuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XHJcblx0XHR0aGlzLnNldHRpbmdzLnNuaXBwZXRzID0gc3BsaXRlZDtcclxuXHR9XHJcblxyXG5cdGdldFNlbGVjdGVkVGV4dChlZGl0b3I6IENvZGVNaXJyb3IuRWRpdG9yKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcIkdldFNlbGVjdGVkVGV4dFwiKTtcclxuXHRcdGlmIChlZGl0b3Iuc29tZXRoaW5nU2VsZWN0ZWQoKSkge1xyXG5cdFx0XHRyZXR1cm4gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHdvcmRCb3VuZGFyaWVzID0gdGhpcy5nZXRXb3JkQm91bmRhcmllcyhlZGl0b3IpO1xyXG5cdFx0XHRlZGl0b3IuZ2V0RG9jKCkuc2V0U2VsZWN0aW9uKHdvcmRCb3VuZGFyaWVzLnN0YXJ0LCB3b3JkQm91bmRhcmllcy5lbmQpO1xyXG5cdFx0XHRyZXR1cm4gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aXNXb3JkKGM6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc29sZS5sb2coXCJJc1dvcmRcIik7XHJcblx0XHQvL2lmIGNoYXJhY3RlciBpcyBub3QgYSB3aGllc3BhY2Ugb3IgYSBkZWxpbWl0ZXJcclxuXHRcdHZhciBub3RXb3JkID0gJyBcXHRcXG5cXHJcXHYnICsgdGhpcy5zZXR0aW5ncy53b3JkRGVsaW1pdGVycztcclxuXHRcdGlmIChub3RXb3JkLmluZGV4T2YoYykgPD0gLTEpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdFNuaXBwZXRzV29yZEF0KGNtOiBDb2RlTWlycm9yLkVkaXRvciwgcG9zOiBDb2RlTWlycm9yLlBvc2l0aW9uKTogYW55IHtcclxuXHRcdGNvbnNvbGUubG9nKFwic25pcHBldHNXb3JkQXRcIik7XHJcblx0XHR2YXIgc3RhcnQgPSBwb3MuY2gsIGVuZCA9IHN0YXJ0LCBsaW5lID0gY20uZ2V0TGluZShwb3MubGluZSk7XHJcblx0XHR3aGlsZSAoc3RhcnQgJiYgdGhpcy5pc1dvcmQobGluZS5jaGFyQXQoc3RhcnQgLSAxKSkpIC0tc3RhcnQ7XHJcblx0XHR3aGlsZSAoZW5kIDwgbGluZS5sZW5ndGggJiYgdGhpcy5pc1dvcmQobGluZS5jaGFyQXQoZW5kKSkpICsrZW5kO1xyXG5cdFx0dmFyIGZyID0geyBsaW5lOiBwb3MubGluZSwgY2g6IHN0YXJ0IH07XHJcblx0XHR2YXIgdCA9IHsgbGluZTogcG9zLmxpbmUsIGNoOiBlbmQgfTtcclxuXHRcdHJldHVybiB7IGZyb206IGZyLCB0bzogdCwgd29yZDogbGluZS5zbGljZShzdGFydCwgZW5kKSB9O1xyXG5cdH1cclxuXHJcblx0Z2V0V29yZEJvdW5kYXJpZXMoZWRpdG9yOiBDb2RlTWlycm9yLkVkaXRvcikge1xyXG5cdFx0Y29uc29sZS5sb2coXCJnZXRXb3JkQm91bmRhcmllc1wiKTtcclxuXHRcdHZhciBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHR2YXIgbGluZSA9IGN1cnNvci5saW5lO1xyXG5cdFx0dmFyIGNoID0gY3Vyc29yLmNoO1xyXG5cclxuXHRcdHZhciB3b3JkID0gdGhpcy5TbmlwcGV0c1dvcmRBdChlZGl0b3IsIGN1cnNvcik7XHJcblx0XHR2YXIgd29yZFN0YXJ0ID0gd29yZC5mcm9tLmNoO1xyXG5cdFx0dmFyIHdvcmRFbmQgPSB3b3JkLnRvLmNoO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0c3RhcnQ6IHtcclxuXHRcdFx0XHRsaW5lOiBsaW5lLFxyXG5cdFx0XHRcdGNoOiB3b3JkU3RhcnRcclxuXHRcdFx0fSxcclxuXHRcdFx0ZW5kOiB7XHJcblx0XHRcdFx0bGluZTogbGluZSxcclxuXHRcdFx0XHRjaDogd29yZEVuZFxyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdGZpbmRTbmlwcGV0KGVkaXRvcjogQ29kZU1pcnJvci5FZGl0b3IsIGN1cnNvck9yaWc6IENvZGVNaXJyb3IuUG9zaXRpb24sIGN1cnNvcjogQ29kZU1pcnJvci5Qb3NpdGlvbik6IHN0cmluZyB7XHJcblx0XHRjb25zb2xlLmxvZyhcImZpbmQgc25pcHBldFwiKTtcclxuXHRcdHZhciBzZWxlY3RlZFRleHQgPSB0aGlzLmdldFNlbGVjdGVkVGV4dChlZGl0b3IpO1xyXG5cdFx0dmFyIHdvcmREZWxpbWl0ZXJzID0gQXJyYXkuZnJvbSh0aGlzLnNldHRpbmdzLndvcmREZWxpbWl0ZXJzKTtcclxuXHRcdHZhciBzZWxlY3RlZFdvU3BhY2VzID0gJycgKyBzZWxlY3RlZFRleHQuc3BsaXQoJyAnKS5qb2luKCcnKTtcclxuXHRcdHZhciBuZXdTdHIgPSBcIlwiO1xyXG5cdFx0dmFyIGk7XHJcblx0XHR2YXIgc25pcHBldHMgPSB0aGlzLnNldHRpbmdzLnNuaXBwZXRzO1xyXG5cdFx0Zm9yIChpIGluIHNuaXBwZXRzKSB7XHJcblx0XHRcdHZhciBzbmlwcGV0ID0gc25pcHBldHNbaV0uc3BsaXQoJyA6ICcpO1xyXG5cclxuXHRcdFx0aWYgKHNlbGVjdGVkVGV4dCA9PSBzbmlwcGV0WzBdKSB7XHJcblx0XHRcdFx0bmV3U3RyID0gc25pcHBldFsxXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKHNlbGVjdGVkVGV4dCBpbiB0aGlzLm1sU25pcHBldHMgJiYgbmV3U3RyLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcdG5ld1N0ciA9IHRoaXMubWxTbmlwcGV0c1tzZWxlY3RlZFRleHRdO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ld1N0cjtcclxuXHR9XHJcblxyXG5cdGNhbGN1bGF0ZUN1cnNvckVuZFBvcyhuU3RyOiBzdHJpbmcsIGN1cnNvcjogQ29kZU1pcnJvci5Qb3NpdGlvbiwgZW5kUG9zaXRpb246IGFueSk6IHN0cmluZyB7XHJcblx0XHRjb25zb2xlLmxvZyhcImNhbGN1bGF0ZUN1cnNvckVuZFBvc1wiKTtcclxuXHRcdHZhciBubFN5bWIgPSB0aGlzLnNldHRpbmdzLm5ld2xpbmVTeW1ib2w7XHJcblx0XHR2YXIgZW5kU3ltYm9sID0gdGhpcy5zZXR0aW5ncy5lbmRTeW1ib2w7XHJcblx0XHR2YXIgc3RvcFN5bWJvbCA9IHRoaXMuc2V0dGluZ3Muc3RvcFN5bWJvbDtcclxuXHRcdC8vIHZhciBuZXdTdHIgPSBuU3RyLnNwbGl0KCdcXG4nKS5qb2luKCcnKTtcclxuXHRcdHZhciBuZXdTdHIgPSBuU3RyO1xyXG5cclxuXHRcdGlmIChuZXdTdHIuaW5kZXhPZihzdG9wU3ltYm9sKSA9PSAtMSkge1xyXG5cdFx0XHR2YXIgcmF3RW5kID0gbmV3U3RyLmluZGV4T2YoZW5kU3ltYm9sKTtcclxuXHRcdFx0aWYgKHJhd0VuZCA9PSAtMSkgcmF3RW5kID0gbmV3U3RyLmxlbmd0aDtcclxuXHRcdFx0dmFyIGxhc3RObCA9IG5ld1N0ci5zdWJzdHJpbmcoMCwgcmF3RW5kKS5sYXN0SW5kZXhPZihubFN5bWIpO1xyXG5cdFx0XHRpZiAobGFzdE5sICE9IC0xKSB2YXIgZW5kUG9zSW5kZXggPSByYXdFbmQgLSBsYXN0TmwgLSBubFN5bWIubGVuZ3RoIC0gY3Vyc29yLmNoO1xyXG5cdFx0XHRlbHNlIHZhciBlbmRQb3NJbmRleCA9IHJhd0VuZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBlbmRQb3NJbmRleCA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0bmxTeW1iID0gbmxTeW1iLnJlcGxhY2UoL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nLCAnXFxcXCQmJyk7XHQvL25vIHNwZWNpYWwgc3ltYm9scyBpbiBubFN5bWJcclxuXHRcdHZhciByZyA9IG5sU3ltYiArICdcXFxcbicgKyAnfCcgKyBubFN5bWI7XHJcblx0XHRjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocmcpO1xyXG5cdFx0Y29uc3QgcmVnZXhGID0gbmV3IFJlZ0V4cChyZywgJ2cnKTtcclxuXHRcdHZhciBubGluZXNDb3VudCA9IChuZXdTdHIuc3Vic3RyaW5nKDAsIHJhd0VuZCkubWF0Y2gocmVnZXhGKSB8fCBbXSkubGVuZ3RoO1xyXG5cclxuXHRcdGVuZFBvc2l0aW9uLm5saW5lc0NvdW50ID0gbmxpbmVzQ291bnQ7XHJcblx0XHRlbmRQb3NpdGlvbi5wb3NpdGlvbiA9IGVuZFBvc0luZGV4O1xyXG5cclxuXHRcdG5ld1N0ciA9IG5ld1N0ci5zcGxpdChyZWdleCkuam9pbignXFxuJyk7XHJcblx0XHRuZXdTdHIgPSBuZXdTdHIucmVwbGFjZShlbmRTeW1ib2wsICcnKTtcclxuXHRcdHJldHVybiBuZXdTdHI7XHJcblx0fVxyXG5cclxuXHJcblx0aW5zZXJ0U25pcHBldChrZXk6IHN0cmluZyA9ICcnLCBzbmlwcGV0U3RhcnRwb3M6IENvZGVNaXJyb3IuUG9zaXRpb24gPSB7IGNoOiAtMSwgbGluZTogLTEgfSk6IGJvb2xlYW4ge1xyXG5cdFx0Y29uc29sZS5sb2coXCJpbnNlcnRTbmlwcGV0XCIpO1xyXG5cdFx0bGV0IGFjdGl2ZUxlYWY6IGFueSA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmO1xyXG5cdFx0bGV0IGVkaXRvciA9IGFjdGl2ZUxlYWYudmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0dmFyIGN1cnNvck9yaWcgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHR2YXIgd2FzU2VsZWN0aW9uID0gZWRpdG9yLnNvbWV0aGluZ1NlbGVjdGVkKCk7XHJcblx0XHR2YXIgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcignZnJvbScpO1xyXG5cdFx0dmFyIHdvcmRCb3VuZGFyaWVzO1xyXG5cdFx0aWYgKHdhc1NlbGVjdGlvbikge1xyXG5cdFx0XHR3b3JkQm91bmRhcmllcyA9IHsgc3RhcnQ6IGN1cnNvciwgZW5kOiBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpIH07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR3b3JkQm91bmRhcmllcyA9IHRoaXMuZ2V0V29yZEJvdW5kYXJpZXMoZWRpdG9yKTtcclxuXHRcdH1cclxuXHRcdHZhciBzdG9wU3ltYm9sID0gdGhpcy5zZXR0aW5ncy5zdG9wU3ltYm9sO1xyXG5cdFx0dmFyIHBhc3RlU3ltYm9sID0gdGhpcy5zZXR0aW5ncy5wYXN0ZVN5bWJvbDtcclxuXHRcdHZhciBzdG9wRm91bmQgPSBmYWxzZTtcclxuXHRcdHZhciBuZXdTdHIgPSBcIlwiO1xyXG5cclxuXHRcdG5ld1N0ciA9IHRoaXMuZmluZFNuaXBwZXQoZWRpdG9yLCBjdXJzb3JPcmlnLCBjdXJzb3IpO1xyXG5cdFx0Y3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcignZnJvbScpO1xyXG5cclxuXHRcdC8vcHJvY2VlZCBUYWIgYW5kIFNwYWNlYmFyXHJcblx0XHR2YXIgZW5kQ3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigndG8nKTtcclxuXHRcdGlmIChuZXdTdHIgPT0gXCJcIiB8fFxyXG5cdFx0XHQoa2V5ID09ICdTcGFjZScgJiYgKGN1cnNvck9yaWcuY2ggIT0gZW5kQ3Vyc29yLmNoIHx8IGN1cnNvck9yaWcubGluZSAhPSBlbmRDdXJzb3IubGluZSkpKSB7XHJcblx0XHRcdGlmICh3YXNTZWxlY3Rpb24gPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRlZGl0b3IuZ2V0RG9jKCkuc2V0U2VsZWN0aW9uKGN1cnNvck9yaWcsIGN1cnNvck9yaWcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChrZXkgPT0gJ1NwYWNlJykgcmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRpZiAobmV3U3RyID09IFwiXCIpIHtcclxuXHRcdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvck9yaWcpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLm5leHRTdG9wKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvL2ZpbmQgZW5kIHBvc2l0aW9uXHJcblx0XHR2YXIgZW5kUG9zaXRpb24gPSB7IG5saW5lc0NvdW50OiAwLCBwb3NpdGlvbjogMCB9O1xyXG5cdFx0bmV3U3RyID0gdGhpcy5jYWxjdWxhdGVDdXJzb3JFbmRQb3MobmV3U3RyLCBjdXJzb3IsIGVuZFBvc2l0aW9uKTtcclxuXHRcdGlmIChuZXdTdHIuaW5kZXhPZihzdG9wU3ltYm9sKSAhPSAtMSkgc3RvcEZvdW5kID0gdHJ1ZTtcclxuXHRcdGlmIChuZXdTdHIuaW5kZXhPZihwYXN0ZVN5bWJvbCkgIT0gLTEpIHNuaXBwZXRTdGFydHBvcyA9IGN1cnNvcjtcclxuXHJcblx0XHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihuZXdTdHIpO1xyXG5cdFx0aWYgKHN0b3BGb3VuZCkge1xyXG5cdFx0XHRlZGl0b3Iuc2V0Q3Vyc29yKHtcclxuXHRcdFx0XHRsaW5lOiBjdXJzb3IubGluZSxcclxuXHRcdFx0XHRjaDogY3Vyc29yLmNoXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5uZXh0U3RvcCgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZWRpdG9yLnNldEN1cnNvcih7XHJcblx0XHRcdFx0bGluZTogY3Vyc29yLmxpbmUgKyBlbmRQb3NpdGlvbi5ubGluZXNDb3VudCxcclxuXHRcdFx0XHRjaDogY3Vyc29yLmNoICsgZW5kUG9zaXRpb24ucG9zaXRpb25cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRlZGl0b3IuZm9jdXMoKTtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0YWRqdXN0Q3Vyc29yKGVkaXRvcjogQ29kZU1pcnJvci5FZGl0b3IsIGN1cnNvcjogQ29kZU1pcnJvci5Qb3NpdGlvbiwgbmV3U3RyOiBzdHJpbmcsIG9sZFN0cjogc3RyaW5nKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcImFkanVzdEN1cnNvclwiKTtcclxuXHRcdHZhciBjdXJzb3JPZmZzZXQgPSBuZXdTdHIubGVuZ3RoIC0gb2xkU3RyLmxlbmd0aDtcclxuXHRcdHRoaXMuYWRqdXN0Q3Vyc29yT2Zmc2V0KGVkaXRvciwgY3Vyc29yLCBjdXJzb3JPZmZzZXQpO1xyXG5cdH1cclxuXHJcblx0YWRqdXN0Q3Vyc29yT2Zmc2V0KGVkaXRvcjogQ29kZU1pcnJvci5FZGl0b3IsIGN1cnNvcjogQ29kZU1pcnJvci5Qb3NpdGlvbiwgY3Vyc29yT2Zmc2V0OiBhbnkpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiQWRqdXN0Q3Vyc29yT2Zmc2V0XCIpO1xyXG5cdFx0ZWRpdG9yLnNldEN1cnNvcih7XHJcblx0XHRcdGxpbmU6IGN1cnNvci5saW5lLFxyXG5cdFx0XHRjaDogY3Vyc29yLmNoICsgY3Vyc29yT2Zmc2V0XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZUtleURvd24oY206IENvZGVNaXJyb3IuRWRpdG9yLCBldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG5cdFx0Y29uc29sZS5sb2coXCJIYW5kbGVLZXlEb3duXCIpO1xyXG5cdFx0aWYgKChldmVudC5rZXkgPT0gJ1RhYicgJiYgdGhpcy5zZXR0aW5ncy51c2VUYWIpIHx8IChldmVudC5jb2RlID09ICdTcGFjZScgJiYgdGhpcy5zZXR0aW5ncy51c2VTcGFjZSkpIHtcclxuXHRcdFx0dGhpcy5TbmlwcGV0T25UcmlnZ2VyKGV2ZW50LmNvZGUsIHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0U25pcHBldE9uVHJpZ2dlcihrZXk6IHN0cmluZyA9ICcnLCBwcmV2ZW50RGVmOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHtcclxuXHRcdGNvbnNvbGUubG9nKFwic25pcHBldE9uVHJpZ2dlclwiKTtcclxuXHRcdGxldCBhY3RpdmVMZWFmOiBhbnkgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHRcdGxldCBjbSA9IGFjdGl2ZUxlYWYudmlldy5zb3VyY2VNb2RlLmNtRWRpdG9yO1xyXG5cdFx0dmFyIGN1cnNvclN0ID0gY20uZ2V0Q3Vyc29yKCk7XHJcblx0XHRpZiAodGhpcy5pbnNlcnRTbmlwcGV0KGtleSwgY3Vyc29yU3QpKSB7XHJcblxyXG5cdFx0XHRpZiAocHJldmVudERlZikge1xyXG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaXNXWVNJV1lHICYmIGtleSA9PSAnVGFiJykge1xyXG5cdFx0XHRcdFx0Ly8gZGVsZXRlICdcXHQnIGluIExpdmUgcHJldmlld1xyXG5cdFx0XHRcdFx0dmFyIHNlYXJjaCA9IGNtLnNlYXJjaEN1cnNvcignXFx0JywgY3Vyc29yU3QpO1xyXG5cdFx0XHRcdFx0aWYgKHNlYXJjaC5maW5kUHJldmlvdXMoKSkge1xyXG5cdFx0XHRcdFx0XHRzZWFyY2gucmVwbGFjZSgnJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoY3Vyc29yU3QuY2ggPj0gMCAmJiBjdXJzb3JTdC5saW5lID49IDApIHtcdFx0Ly9wYXN0ZSB0ZXh0IGZyb20gY2xpcGJvYXJkXHJcblx0XHRcdFx0dmFyIGN1cnNvck9yaWcgPSBjbS5nZXRDdXJzb3IoKTtcclxuXHRcdFx0XHRuYXZpZ2F0b3IuY2xpcGJvYXJkLnJlYWRUZXh0KCkudGhlbihcclxuXHRcdFx0XHRcdChjbGlwVGV4dCkgPT4ge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuaXNXWVNJV1lHID09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHNlYXJjaCA9IGNtLmdldFNlYXJjaEN1cnNvcih0aGlzLnNldHRpbmdzLnBhc3RlU3ltYm9sLCBjdXJzb3JTdCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHNlYXJjaCA9IGNtLnNlYXJjaEN1cnNvcih0aGlzLnNldHRpbmdzLnBhc3RlU3ltYm9sLCBjdXJzb3JTdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHNlYXJjaC5maW5kTmV4dCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0c2VhcmNoLnJlcGxhY2UoY2xpcFRleHQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLm5leHRTdG9wKCk7XHJcblx0fVxyXG5cclxuXHRuZXh0U3RvcCgpOiBib29sZWFuIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiTmV4dFN0b3BcIik7XHJcblx0XHRsZXQgYWN0aXZlTGVhZjogYW55ID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcblx0XHRsZXQgY20gPSBhY3RpdmVMZWFmLnZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmlzV1lTSVdZRyA9PSBmYWxzZSkge1xyXG5cdFx0XHR2YXIgc2VhcmNoID0gY20uZ2V0U2VhcmNoQ3Vyc29yKHRoaXMuc2V0dGluZ3Muc3RvcFN5bWJvbCwgY20uZ2V0Q3Vyc29yKCkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHNlYXJjaCA9IGNtLnNlYXJjaEN1cnNvcih0aGlzLnNldHRpbmdzLnN0b3BTeW1ib2wsIGNtLmdldEN1cnNvcigpKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc2VhcmNoLmZpbmROZXh0KCkpIHtcclxuXHRcdFx0c2VhcmNoLnJlcGxhY2UoXCJcIik7XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmlzV1lTSVdZRyA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdGNtLnNldEN1cnNvcihzZWFyY2guZnJvbSgpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbS5zZXRDdXJzb3Ioc2VhcmNoLmN1cnJlbnQoKS5mcm9tKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncy51c2VUYWIpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxufVxyXG5cclxuaW50ZXJmYWNlIFRleHRTbmlwcGV0c1NldHRpbmdzIHtcclxuXHRzbmlwcGV0c19maWxlOiBzdHJpbmc7XHJcblx0c25pcHBldHM6IHN0cmluZ1tdO1xyXG5cdGVuZFN5bWJvbDogc3RyaW5nO1xyXG5cdG5ld2xpbmVTeW1ib2w6IHN0cmluZztcclxuXHRzdG9wU3ltYm9sOiBzdHJpbmc7XHJcblx0cGFzdGVTeW1ib2w6IHN0cmluZztcclxuXHR1c2VUYWI6IGJvb2xlYW47XHJcblx0dXNlU3BhY2U6IGJvb2xlYW47XHJcblx0d29yZERlbGltaXRlcnM6IHN0cmluZztcclxuXHRpc1dZU0lXWUc6IGJvb2xlYW47XHJcblx0bXVsdGlsaW5lRm9sZGVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFRleHRTbmlwcGV0c1NldHRpbmdzID0ge1xyXG5cdHNuaXBwZXRzX2ZpbGU6IFwic25pcHBldHMgOiBJdCBpcyBhbiBvYnNpZGlhbiBwbHVnaW4sIHRoYXQgcmVwbGFjZXMgeW91ciBzZWxlY3RlZCB0ZXh0LlwiLFxyXG5cdHNuaXBwZXRzOiBbXCJzbmlwcGV0cyA6IEl0IGlzIGFuIG9ic2lkaWFuIHBsdWdpbiwgdGhhdCByZXBsYWNlcyB5b3VyIHNlbGVjdGVkIHRleHQuXCJdLFxyXG5cdGVuZFN5bWJvbDogJyRlbmQkJyxcclxuXHRuZXdsaW5lU3ltYm9sOiAnJG5sJCcsXHJcblx0c3RvcFN5bWJvbDogXCIkdGIkXCIsXHJcblx0cGFzdGVTeW1ib2w6IFwiJHBzdCRcIixcclxuXHR1c2VUYWI6IHRydWUsXHJcblx0dXNlU3BhY2U6IGZhbHNlLFxyXG5cdHdvcmREZWxpbWl0ZXJzOiBcIiQoKVtde308PiwuIT87OlxcJ1xcXCJcXFxcL1wiLFxyXG5cdGlzV1lTSVdZRzogZmFsc2UsXHJcblx0bXVsdGlsaW5lRm9sZGVyOiBcIlwiLFxyXG59XHJcblxyXG5jbGFzcyBUZXh0U25pcHBldHNTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogVGV4dFNuaXBwZXRzO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUZXh0U25pcHBldHMpIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGxldCB7XHJcblx0XHRcdGNvbnRhaW5lckVsXHJcblx0XHR9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnVGV4dCBTbmlwcGV0cyAtIFNldHRpbmdzJyB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJTbmlwcGV0c1wiKVxyXG5cdFx0XHQuc2V0RGVzYyhcIlR5cGUgaGVyZSB5b3VyIHNuaXBwZXRzIGluIGZvcm1hdCAnc25pcHBldCA6IHJlc3VsdCcsIG9uZSBwZXIgbGluZS4gRW1wdHkgbGluZXMgd2lsbCBiZSBpZ25vcmVkLiBDdHJsK1RhYiB0byByZXBsYWNlIChob3RrZXkgY2FuIGJlIGNoYW5nZWQpLlwiKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJ0ZXh0LXNuaXBwZXRzLWNsYXNzXCIpXHJcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCJiZWZvcmUgOiBhZnRlclwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNuaXBwZXRzX2ZpbGUpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnNuaXBwZXRzX2ZpbGUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uVXBkYXRlU3BsaXQodGhpcy5wbHVnaW4uc2V0dGluZ3MubmV3bGluZVN5bWJvbCk7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnTXVsdGlsaW5lIFNuaXBwZXQgUGF0aCcpXHJcblx0XHRcdC5zZXREZXNjKCdUaGlzIHNwZWNpZmllcyB0aGUgcGF0aCB3aGVyZSB0aGUgbXVsdGlsaW5lIHNuaXBwZXRzIGZvciB0aGlzIHBsdWdpbiBhcmUgc3RvcmVkJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciB5b3VyIHBhdGgnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tdWx0aWxpbmVGb2xkZXIpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXVsdGlsaW5lRm9sZGVyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJDdXJzb3IgZW5kIHBvc2l0aW9uIG1hcmtcIilcclxuXHRcdFx0LnNldERlc2MoXCJQbGFjZXMgdGhlIGN1cnNvciB0byB0aGUgbWFyayBwb3NpdGlvbiBhZnRlciBpbnNlcnRpbmcgYSBzbmlwcGV0IChkZWZhdWx0OiAkZW5kJCkuXFxuTWFyayBkb2VzIG5vdCBhcHBlYXIgYW55d2hlcmUgd2l0aGluIHRoZSBzbmlwcGV0LiBEbyBub3QgdXNlIHRvZ2V0aGVyIHdpdGggU3RvcCBTeW1ib2wuXCIpXHJcblx0XHRcdC5zZXRDbGFzcyhcInRleHQtc25pcHBldHMtY3Vyc29yXCIpXHJcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoXCIkZW5kJFwiKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuZFN5bWJvbClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSAnJGVuZCQnO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmVuZFN5bWJvbCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoXCJOZXdsaW5lIG1hcmtcIilcclxuXHRcdFx0LnNldERlc2MoXCJJZ25vcmVzIG5ld2xpbmUgYWZ0ZXIgbWFyaywgcmVwbGFjZSBpdCB3aXRoIGEgbmV3bGluZSBjaGFyYWN0ZXIgYWZ0ZXIgZXhwYW5kaW5nIChkZWZhdWx0OiAkbmwkKS5cXG5OZWNlc3NhcnkgdG8gd3JpdGUgYmVmb3JlIGV2ZXJ5IGxpbmUgYnJlYWsgaW4gbXVsdGlsaW5lIHNuaXBwZXRzLlwiKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJ0ZXh0LXNuaXBwZXRzLW5ld2xpbmVcIilcclxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PlxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihcIiRubCRcIilcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5uZXdsaW5lU3ltYm9sKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgPT0gJycpIHtcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9ICckbmwkJztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5uZXdsaW5lU3ltYm9sID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLlVwZGF0ZVNwbGl0KHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdTdG9wIFN5bWJvbCcpXHJcblx0XHRcdC5zZXREZXNjKCdTeW1ib2wgdG8ganVtcCB0byB3aGVuIGNvbW1hbmQgaXMgY2FsbGVkLicpXHJcblx0XHRcdC5zZXRDbGFzcyhcInRleHQtc25pcHBldHMtdGFic3RvcHNcIilcclxuXHRcdFx0LmFkZFRleHRBcmVhKCh0ZXh0KSA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCcnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdG9wU3ltYm9sKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdGlmICh2YWx1ZSA9PSAnJykge1xyXG5cdFx0XHRcdFx0XHR2YWx1ZSA9ICckdGIkJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnN0b3BTeW1ib2wgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblxyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnQ2xpcGJvYXJkIHBhc3RlIFN5bWJvbCcpXHJcblx0XHRcdC5zZXREZXNjKCdTeW1ib2wgdG8gYmUgcmVwbGFjZWQgd2l0aCBjbGlwYm9hcmQgY29udGVudC4nKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJ0ZXh0LXNuaXBwZXRzLXRhYnN0b3BzXCIpXHJcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignJylcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGFzdGVTeW1ib2wpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKHZhbHVlID09ICcnKSB7XHJcblx0XHRcdFx0XHRcdHZhbHVlID0gJyRwc3QkJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBhc3RlU3ltYm9sID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkV4cGFuZCBvbiBUYWJcIilcclxuXHRcdFx0LnNldERlc2MoXCJVc2UgdGhlIFRhYiBrZXkgYXMgdGhlIHRyaWdnZXIuXCIpXHJcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+XHJcblx0XHRcdFx0dG9nZ2xlLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVRhYilcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlVGFiID0gIXRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVRhYjtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKFwiRXhwYW5kIG9uIFNwYWNlXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiVXNlIHRoZSBTcGFjZSBiYXIgYnV0dG9uIGFzIHRoZSB0cmlnZ2VyLlwiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PlxyXG5cdFx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy51c2VTcGFjZSlcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlU3BhY2UgPSAhdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlU3BhY2U7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZShcIkxpdmUgUHJldmlldyBNb2RlXCIpXHJcblx0XHRcdC5zZXREZXNjKFwiVG9nZ2xlIG1hbnVhbGx5IGlmIG5vdCBjb3JyZWN0LiBZb3Ugc2hvdWxkIHJlc3RhcnQgcGx1Z2luIGFmdGVyIGNoYW5naW5nIHRoaXMgb3B0aW9uLlwiKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PlxyXG5cdFx0XHRcdHRvZ2dsZS5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc1dZU0lXWUcpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmlzV1lTSVdZRyA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5pc1dZU0lXWUc7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1dvcmQgZGVsaW1pdGVycycpXHJcblx0XHRcdC5zZXREZXNjKCfQoWhhcmFjdGVycyBmb3Igc3BlY2lmeWluZyB0aGUgYm91bmRhcnkgYmV0d2VlbiBzZXBhcmF0ZSB3b3Jkcy4nKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJ0ZXh0LXNuaXBwZXRzLWRlbGltaXRlclwiKVxyXG5cdFx0XHQuYWRkVGV4dEFyZWEoKHRleHQpID0+IHRleHRcclxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJycpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmREZWxpbWl0ZXJzKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLndvcmREZWxpbWl0ZXJzID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpO1xyXG5cclxuXHR9XHJcbn1cclxuIl0sIm5hbWVzIjpbIlBsdWdpbiIsIlRGb2xkZXIiLCJURmlsZSIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQOztBQ3pEcUIsTUFBQSxZQUFhLFNBQVFBLGVBQU0sQ0FBQTtBQUFoRCxJQUFBLFdBQUEsR0FBQTs7UUFHQyxJQUFVLENBQUEsVUFBQSxHQUFvQixFQUFFLENBQUM7S0F5WmpDO0FBdFpBOzs7Ozs7QUFNSTtBQUNKLElBQUEsZUFBZSxDQUFDLElBQVcsRUFBQTs7UUFFMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRTtBQUN0RCxZQUFBLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN4QyxZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ1osU0FBQTtBQUNELFFBQUEsT0FBTyxLQUFLLENBQUM7S0FDYjtBQUNEOzs7Ozs7QUFNRztBQUNILElBQUEsZUFBZSxDQUFDLElBQVcsRUFBQTtBQUMxQixRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO0FBQ3RELFlBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUM1RixZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ1osU0FBQTtBQUNELFFBQUEsT0FBTyxLQUFLLENBQUM7S0FDYjtBQUVEOzs7Ozs7QUFNRztBQUNILElBQUEsZUFBZSxDQUFDLElBQVcsRUFBQTtBQUMxQixRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUU5QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO1lBQ3RELElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNqQixZQUFBLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDNUIsWUFBQSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBWSxDQUFDO0FBQzVGLFlBQUEsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQU0sQ0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFlBQUEsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNoQyxJQUFJLENBQUMsSUFBSSxLQUFLO29CQUFFLFNBQVM7Z0JBQ3pCLE9BQU8sR0FBRyxDQUFDLENBQUM7Z0JBQ1osTUFBTTtBQUNOLGFBQUE7QUFDRCxZQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNwRCxZQUFBLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoQyxZQUFBLE9BQU8sSUFBSSxDQUFDO0FBQ1osU0FBQTtBQUNELFFBQUEsT0FBTyxLQUFLLENBQUM7S0FDYjtBQUdEOzs7O0FBSUc7SUFDRyxjQUFjLEdBQUE7O0FBQ25CLFlBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUU3QixZQUFBLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDakYsWUFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0QsWUFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0QsWUFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFFN0QsSUFBSSxNQUFNLFlBQVlDLGdCQUFPLEVBQUU7Z0JBRTlCLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFJO29CQUM3QixJQUFJLENBQUMsWUFBWUMsY0FBSyxFQUFFO0FBQ3ZCLHdCQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDeEYscUJBQUE7QUFDRixpQkFBQyxDQUFDLENBQUM7QUFDSCxhQUFBO0FBQ0ksaUJBQUE7QUFDSixnQkFBQSxNQUFNLG9CQUFvQixDQUFDO0FBQzNCLGFBQUE7U0FDRCxDQUFBLENBQUE7QUFBQSxLQUFBO0FBRUQsSUFBQSxNQUFNLE1BQU07SUFFTixNQUFNLEdBQUE7O0FBQ1gsWUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDdkMsWUFBQSxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUUxQixZQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7O1lBRWhFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtBQUN6QyxnQkFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUNwQyxnQkFBQSxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMxQixhQUFBO1lBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUNmLGdCQUFBLEVBQUUsRUFBRSxlQUFlO0FBQ25CLGdCQUFBLElBQUksRUFBRSx5QkFBeUI7QUFDL0IsZ0JBQUEsUUFBUSxFQUFFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixFQUFFO0FBQ3ZDLGdCQUFBLE9BQU8sRUFBRSxDQUFDO3dCQUNULFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUNsQix3QkFBQSxHQUFHLEVBQUUsS0FBSztxQkFDVixDQUFDO0FBQ0YsYUFBQSxDQUFDLENBQUM7QUFFSCxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFlBQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxLQUFJO0FBQzlCLGdCQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztnQkFFeEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEUsYUFBQyxDQUFDLENBQUM7O1lBR0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQUs7Ozs7QUFJckMsZ0JBQUEsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQ3BFLGdCQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDekYsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ3ZCLGFBQUMsQ0FDQSxDQUFBO1NBR0QsQ0FBQSxDQUFBO0FBQUEsS0FBQTtJQUVLLFFBQVEsR0FBQTs7QUFDYixZQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUU3QyxZQUFBLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFlBQUEsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxLQUFJO0FBQzlCLGdCQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztnQkFFeEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDakUsYUFBQyxDQUFDLENBQUM7U0FDSCxDQUFBLENBQUE7QUFBQSxLQUFBO0lBRUssWUFBWSxHQUFBOztBQUNqQixZQUFBLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUMzRSxDQUFBLENBQUE7QUFBQSxLQUFBO0lBRUssWUFBWSxHQUFBOztZQUNqQixNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQ2xDLENBQUEsQ0FBQTtBQUFBLEtBQUE7QUFFRCxJQUFBLFdBQVcsQ0FBQyxhQUFxQixFQUFBO0FBQ2hDLFFBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQixJQUFJLE1BQU0sR0FBRyxhQUFhLENBQUM7UUFDM0IsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoRSxRQUFBLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ2xDLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0IsUUFBQSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLFFBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0tBQ2pDO0FBRUQsSUFBQSxlQUFlLENBQUMsTUFBeUIsRUFBQTtBQUN4QyxRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMvQixRQUFBLElBQUksTUFBTSxDQUFDLGlCQUFpQixFQUFFLEVBQUU7QUFDL0IsWUFBQSxPQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM3QixTQUFBO0FBQU0sYUFBQTtZQUNOLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNwRCxZQUFBLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkUsWUFBQSxPQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUM3QixTQUFBO0tBQ0Q7QUFFRCxJQUFBLE1BQU0sQ0FBQyxDQUFNLEVBQUE7QUFDWixRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7O1FBRXRCLElBQUksT0FBTyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUN6RCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDN0IsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNaLFNBQUE7QUFDRCxRQUFBLE9BQU8sS0FBSyxDQUFDO0tBQ2I7SUFDRCxjQUFjLENBQUMsRUFBcUIsRUFBRSxHQUF3QixFQUFBO0FBQzdELFFBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzlCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0QsUUFBQSxPQUFPLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQUUsWUFBQSxFQUFFLEtBQUssQ0FBQztBQUM3RCxRQUFBLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUUsWUFBQSxFQUFFLEdBQUcsQ0FBQztBQUNqRSxRQUFBLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQ3ZDLFFBQUEsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDcEMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztLQUN6RDtBQUVELElBQUEsaUJBQWlCLENBQUMsTUFBeUIsRUFBQTtBQUMxQyxRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNqQyxRQUFBLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNoQyxRQUFBLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDdkIsUUFBUyxNQUFNLENBQUMsR0FBRztRQUVuQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQyxRQUFBLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQzdCLFFBQUEsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsT0FBTztBQUNOLFlBQUEsS0FBSyxFQUFFO0FBQ04sZ0JBQUEsSUFBSSxFQUFFLElBQUk7QUFDVixnQkFBQSxFQUFFLEVBQUUsU0FBUztBQUNiLGFBQUE7QUFDRCxZQUFBLEdBQUcsRUFBRTtBQUNKLGdCQUFBLElBQUksRUFBRSxJQUFJO0FBQ1YsZ0JBQUEsRUFBRSxFQUFFLE9BQU87QUFDWCxhQUFBO1NBQ0QsQ0FBQztLQUNGO0FBRUQsSUFBQSxXQUFXLENBQUMsTUFBeUIsRUFBRSxVQUErQixFQUFFLE1BQTJCLEVBQUE7QUFDbEcsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDaEQsUUFBcUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtBQUM5RCxRQUF1QixFQUFFLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQzdELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFBLElBQUksQ0FBQyxDQUFDO0FBQ04sUUFBQSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxLQUFLLENBQUMsSUFBSSxRQUFRLEVBQUU7WUFDbkIsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV2QyxZQUFBLElBQUksWUFBWSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUMvQixnQkFBQSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BCLGFBQUE7QUFDRCxTQUFBO1FBQ0QsSUFBSSxZQUFZLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtBQUMxRCxZQUFBLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLFNBQUE7QUFDRCxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFFRCxJQUFBLHFCQUFxQixDQUFDLElBQVksRUFBRSxNQUEyQixFQUFFLFdBQWdCLEVBQUE7QUFDaEYsUUFBQSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDckMsUUFBQSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztBQUN6QyxRQUFBLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQ3hDLFFBQUEsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7O1FBRTFDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUVsQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDckMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN2QyxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFBRSxnQkFBQSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUN6QyxZQUFBLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3RCxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFBRSxnQkFBQSxJQUFJLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQzs7Z0JBQzNFLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQztBQUM5QixTQUFBO0FBQU0sYUFBQTtZQUNOLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNwQixTQUFBO1FBRUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUQsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ3ZDLFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQUksV0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUM7QUFFM0UsUUFBQSxXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUN0QyxRQUFBLFdBQVcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO0FBRW5DLFFBQUEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2QyxRQUFBLE9BQU8sTUFBTSxDQUFDO0tBQ2Q7QUFHRCxJQUFBLGFBQWEsQ0FBQyxHQUFBLEdBQWMsRUFBRSxFQUFFLGtCQUF1QyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBQTtBQUMxRixRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0IsSUFBSSxVQUFVLEdBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3BELElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztBQUNqRCxRQUFBLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNwQyxRQUFBLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzlDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFdEMsUUFBQSxJQUFJLFlBQVksRUFBRTtBQUNqQixhQUFpQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUUsQ0FBQztBQUNoRSxTQUFBO0FBQU0sYUFBQTtBQUNOLFlBQWlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoRCxTQUFBO0FBQ0QsUUFBQSxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztBQUMxQyxRQUFBLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBQzVDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFaEIsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0RCxRQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztRQUdsQyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksTUFBTSxJQUFJLEVBQUU7YUFDZCxHQUFHLElBQUksT0FBTyxLQUFLLFVBQVUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQzFGLElBQUksWUFBWSxJQUFJLEtBQUssRUFBRTtnQkFDMUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDckQsYUFBQTtZQUNELElBQUksR0FBRyxJQUFJLE9BQU87QUFBRSxnQkFBQSxPQUFPLEtBQUssQ0FBQztZQUNqQyxJQUFJLE1BQU0sSUFBSSxFQUFFLEVBQUU7QUFDakIsZ0JBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM3QixnQkFBQSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN2QixhQUFBO0FBQ0QsU0FBQTs7UUFHRCxJQUFJLFdBQVcsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2xELE1BQU0sR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNqRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUUsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN2RCxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQUUsZUFBZSxHQUFHLE1BQU0sQ0FBQztBQUVoRSxRQUFBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNoQyxRQUFBLElBQUksU0FBUyxFQUFFO1lBQ2QsTUFBTSxDQUFDLFNBQVMsQ0FBQztnQkFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO2dCQUNqQixFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDYixhQUFBLENBQUMsQ0FBQztBQUNILFlBQUEsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDdkIsU0FBQTtBQUFNLGFBQUE7WUFDTixNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ2hCLGdCQUFBLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXO0FBQzNDLGdCQUFBLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxRQUFRO0FBQ3BDLGFBQUEsQ0FBQyxDQUFDO0FBQ0gsU0FBQTtRQUNELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNmLFFBQUEsT0FBTyxJQUFJLENBQUM7S0FDWjtBQUVELElBQUEsWUFBWSxDQUFDLE1BQXlCLEVBQUUsTUFBMkIsRUFBRSxNQUFjLEVBQUUsTUFBYyxFQUFBO0FBQ2xHLFFBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QixJQUFJLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDdEQ7QUFFRCxJQUFBLGtCQUFrQixDQUFDLE1BQXlCLEVBQUUsTUFBMkIsRUFBRSxZQUFpQixFQUFBO0FBQzNGLFFBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDaEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0FBQ2pCLFlBQUEsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEdBQUcsWUFBWTtBQUM1QixTQUFBLENBQUMsQ0FBQztLQUNIO0lBRUQsYUFBYSxDQUFDLEVBQXFCLEVBQUUsS0FBb0IsRUFBQTtBQUN4RCxRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdEcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEMsU0FBQTtLQUNEO0FBRUQsSUFBQSxnQkFBZ0IsQ0FBQyxHQUFBLEdBQWMsRUFBRSxFQUFFLGFBQXNCLEtBQUssRUFBQTtBQUM3RCxRQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNoQyxJQUFJLFVBQVUsR0FBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDcEQsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLFFBQUEsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUU7QUFFdEMsWUFBQSxJQUFJLFVBQVUsRUFBRTtnQkFDZixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksR0FBRyxJQUFJLEtBQUssRUFBRTs7b0JBRTVDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLG9CQUFBLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFO0FBQzFCLHdCQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkIscUJBQUE7QUFDRCxpQkFBQTtBQUNELGFBQUE7QUFFRCxZQUFBLElBQUksUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7QUFDM0MsZ0JBQWlCLEVBQUUsQ0FBQyxTQUFTLEdBQUc7Z0JBQ2hDLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUNsQyxDQUFDLFFBQVEsS0FBSTtBQUVaLG9CQUFBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksS0FBSyxFQUFFO0FBQ3JDLHdCQUFBLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDckUscUJBQUE7QUFBTSx5QkFBQTtBQUNOLHdCQUFBLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbEUscUJBQUE7QUFDRCxvQkFBQSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRTtBQUN0Qix3QkFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pCLHFCQUFBO0FBQ0YsaUJBQUMsQ0FBQyxDQUFDO0FBQ0osYUFBQTtBQUNELFlBQUEsT0FBTyxJQUFJLENBQUM7QUFDWixTQUFBO0FBQ0QsUUFBQSxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUN2QjtJQUVELFFBQVEsR0FBQTtBQUNQLFFBQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixJQUFJLFVBQVUsR0FBUSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDcEQsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLFFBQUEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxLQUFLLEVBQUU7QUFDckMsWUFBQSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzFFLFNBQUE7QUFBTSxhQUFBO0FBQ04sWUFBQSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLFNBQUE7QUFFRCxRQUFBLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFO0FBQ3RCLFlBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNuQixZQUFBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksS0FBSyxFQUFFO2dCQUNyQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzVCLGFBQUE7QUFBTSxpQkFBQTtnQkFDTixFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxhQUFBO0FBQ0QsWUFBQSxPQUFPLElBQUksQ0FBQztBQUNaLFNBQUE7QUFBTSxhQUFBLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7QUFDaEMsWUFBQSxPQUFPLEtBQUssQ0FBQztBQUNiLFNBQUE7QUFDRCxRQUFBLE9BQU8sS0FBSyxDQUFDO0tBQ2I7QUFDRCxDQUFBO0FBZ0JELE1BQU0sZ0JBQWdCLEdBQXlCO0FBQzlDLElBQUEsYUFBYSxFQUFFLHdFQUF3RTtJQUN2RixRQUFRLEVBQUUsQ0FBQyx3RUFBd0UsQ0FBQztBQUNwRixJQUFBLFNBQVMsRUFBRSxPQUFPO0FBQ2xCLElBQUEsYUFBYSxFQUFFLE1BQU07QUFDckIsSUFBQSxVQUFVLEVBQUUsTUFBTTtBQUNsQixJQUFBLFdBQVcsRUFBRSxPQUFPO0FBQ3BCLElBQUEsTUFBTSxFQUFFLElBQUk7QUFDWixJQUFBLFFBQVEsRUFBRSxLQUFLO0FBQ2YsSUFBQSxjQUFjLEVBQUUsd0JBQXdCO0FBQ3hDLElBQUEsU0FBUyxFQUFFLEtBQUs7QUFDaEIsSUFBQSxlQUFlLEVBQUUsRUFBRTtDQUNuQixDQUFBO0FBRUQsTUFBTSx1QkFBd0IsU0FBUUMseUJBQWdCLENBQUE7SUFHckQsV0FBWSxDQUFBLEdBQVEsRUFBRSxNQUFvQixFQUFBO0FBQ3pDLFFBQUEsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNuQixRQUFBLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0tBQ3JCO0lBRUQsT0FBTyxHQUFBO0FBQ04sUUFBQSxJQUFJLEVBQ0gsV0FBVyxFQUNYLEdBQUcsSUFBSSxDQUFDO1FBRVQsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixFQUFFLENBQUMsQ0FBQztRQUVqRSxJQUFJQyxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsVUFBVSxDQUFDO2FBQ25CLE9BQU8sQ0FBQywrSUFBK0ksQ0FBQzthQUN4SixRQUFRLENBQUMscUJBQXFCLENBQUM7QUFDL0IsYUFBQSxXQUFXLENBQUMsQ0FBQyxJQUFJLEtBQ2pCLElBQUk7YUFDRixjQUFjLENBQUMsZ0JBQWdCLENBQUM7YUFDaEMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztBQUM1QyxhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztBQUMzQyxZQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzVELFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUNILENBQUM7UUFDSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsd0JBQXdCLENBQUM7YUFDakMsT0FBTyxDQUFDLGlGQUFpRixDQUFDO0FBQzFGLGFBQUEsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJO2FBQ25CLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQzthQUNqQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0FBQzlDLGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQzdDLFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDTixJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsMEJBQTBCLENBQUM7YUFDbkMsT0FBTyxDQUFDLDZLQUE2SyxDQUFDO2FBQ3RMLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQztBQUNoQyxhQUFBLFdBQVcsQ0FBQyxDQUFDLElBQUksS0FDakIsSUFBSTthQUNGLGNBQWMsQ0FBQyxPQUFPLENBQUM7YUFDdkIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUN4QyxhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7WUFDekIsSUFBSSxLQUFLLElBQUksRUFBRSxFQUFFO2dCQUNoQixLQUFLLEdBQUcsT0FBTyxDQUFDO0FBQ2hCLGFBQUE7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUNILENBQUM7UUFDSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsY0FBYyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxxS0FBcUssQ0FBQzthQUM5SyxRQUFRLENBQUMsdUJBQXVCLENBQUM7QUFDakMsYUFBQSxXQUFXLENBQUMsQ0FBQyxJQUFJLEtBQ2pCLElBQUk7YUFDRixjQUFjLENBQUMsTUFBTSxDQUFDO2FBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7QUFDNUMsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO1lBQ3pCLElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRTtnQkFDaEIsS0FBSyxHQUFHLE1BQU0sQ0FBQztBQUNmLGFBQUE7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0FBQzNDLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0IsWUFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDakMsQ0FBQSxDQUFDLENBQ0gsQ0FBQztRQUNILElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3RCLE9BQU8sQ0FBQyxhQUFhLENBQUM7YUFDdEIsT0FBTyxDQUFDLDJDQUEyQyxDQUFDO2FBQ3BELFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztBQUNsQyxhQUFBLFdBQVcsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJO2FBQ3pCLGNBQWMsQ0FBQyxFQUFFLENBQUM7YUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztBQUN6QyxhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7WUFDekIsSUFBSSxLQUFLLElBQUksRUFBRSxFQUFFO2dCQUNoQixLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQ2YsYUFBQTtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7QUFDeEMsWUFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDakMsQ0FBQSxDQUFDLENBQ0YsQ0FBQztRQUdILElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3RCLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQzthQUNqQyxPQUFPLENBQUMsK0NBQStDLENBQUM7YUFDeEQsUUFBUSxDQUFDLHdCQUF3QixDQUFDO0FBQ2xDLGFBQUEsV0FBVyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUk7YUFDekIsY0FBYyxDQUFDLEVBQUUsQ0FBQzthQUNsQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0FBQzFDLGFBQUEsUUFBUSxDQUFDLENBQU8sS0FBSyxLQUFJLFNBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQTtZQUN6QixJQUFJLEtBQUssSUFBSSxFQUFFLEVBQUU7Z0JBQ2hCLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDaEIsYUFBQTtZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDekMsWUFBQSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDakMsQ0FBQSxDQUFDLENBQ0YsQ0FBQztRQUVILElBQUlBLGdCQUFPLENBQUMsV0FBVyxDQUFDO2FBQ3RCLE9BQU8sQ0FBQyxlQUFlLENBQUM7YUFDeEIsT0FBTyxDQUFDLGlDQUFpQyxDQUFDO0FBQzFDLGFBQUEsU0FBUyxDQUFDLE1BQU0sSUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDMUMsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO0FBQ3pCLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQzNELFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUNILENBQUM7UUFDSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsaUJBQWlCLENBQUM7YUFDMUIsT0FBTyxDQUFDLDBDQUEwQyxDQUFDO0FBQ25ELGFBQUEsU0FBUyxDQUFDLE1BQU0sSUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDNUMsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO0FBQ3pCLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0FBQy9ELFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUNILENBQUM7UUFDSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsbUJBQW1CLENBQUM7YUFDNUIsT0FBTyxDQUFDLHVGQUF1RixDQUFDO0FBQ2hHLGFBQUEsU0FBUyxDQUFDLE1BQU0sSUFDaEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7QUFDN0MsYUFBQSxRQUFRLENBQUMsQ0FBTyxLQUFLLEtBQUksU0FBQSxDQUFBLElBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxhQUFBO0FBQ3pCLFlBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO0FBQ2pFLFlBQUEsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDLENBQUEsQ0FBQyxDQUNILENBQUM7UUFFSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVcsQ0FBQzthQUN0QixPQUFPLENBQUMsaUJBQWlCLENBQUM7YUFDMUIsT0FBTyxDQUFDLGdFQUFnRSxDQUFDO2FBQ3pFLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQztBQUNuQyxhQUFBLFdBQVcsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJO2FBQ3pCLGNBQWMsQ0FBQyxFQUFFLENBQUM7YUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztBQUM3QyxhQUFBLFFBQVEsQ0FBQyxDQUFPLEtBQUssS0FBSSxTQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM1QyxZQUFBLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNqQyxDQUFBLENBQUMsQ0FDRixDQUFDO0tBRUg7QUFDRDs7OzsifQ==
